
h 0 = ""
h 1 = "one"
h 2 = "two"
h 3 = "three"
h 4 = "four"
h 5 = "five"
h 6 = "six"
h 7 = "seven"
h 8 = "eight"
h 9 = "nine"
h 10 = "ten"
h 11 = "eleven"
h 12 = "twelve"
h 13 = "thirteen"
h 14 = "fourteen"
h 15 = "fifteen"
h 16 = "sixteen"
h 17 = "seventeen"
h 18 = "eighteen"
h 19 = "nineteen"
h 20 = "twenty"
h 30 = "thirty"
h 40 = "forty"
h 50 = "fifty"
h 60 = "sixty"
h 70 = "seventy"
h 80 = "eighty"
h 90 = "ninety"
h 100 = "onehundred"
h 1000 = "onethousand"
h x | x < 100          = let ones = x `mod` 10 in h (x-ones) ++ h ones
    | x `mod` 100 == 0 = let hundreds = x `div` 100 in h hundreds ++ "hundred"
    | otherwise        = h ((x `div` 100)*100) ++ "and" ++ h (x `mod` 100)

eu17 = length . concat $ map h [1..1000]